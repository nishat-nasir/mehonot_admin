import 'dart:io';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter_image_compress/flutter_image_compress.dart';import 'package:image_picker/image_picker.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:intl/intl.dart';import '../../../manager/firebase/firebase_kit.dart';import 'log_tester.dart';Future<String?> fbUploadCompanyLogoAndGetLink({  required File imageFile,  required String postImageId,}) async {  try {    final reference = FirebaseStorage.instance        .ref("$fbCompanyLogoImgStorageFolderName/$postImageId");    final uploadTask = reference.putFile(imageFile);    final snapshot = await uploadTask.whenComplete(() {});    if (snapshot.state == TaskState.success) {      final downloadURL = await snapshot.ref.getDownloadURL();      return downloadURL;    } else {      logger('Image upload failed', hint: 'fbUploadImgAndGetLink');      return null;    }  } catch (e) {    logger(e.toString(),        hint: 'fbUploadCompanyLogoAndGetLink CATCH ERROR'.toUpperCase());    return null;  }}Future<String?> fbUploadJobImgAndGetLink({  required File imageFile,  required String postImageId,}) async {  try {    final reference = FirebaseStorage.instance        .ref("$fbJobImagesJobStorageFolderName/$postImageId");    final uploadTask = reference.putFile(imageFile);    final snapshot = await uploadTask.whenComplete(() {});    if (snapshot.state == TaskState.success) {      final downloadURL = await snapshot.ref.getDownloadURL();      return downloadURL;    } else {      logger('Image upload failed', hint: 'fbUploadImgAndGetLink');      return null;    }  } catch (e) {    logger(e.toString(), hint: 'FBUPLOADIMGANDGETLINK CATCH ERROR');    return null;  }}Future<bool> fbDeleteJobImg({required String postImageId}) async {  try {    final url = FirebaseStorage.instance.refFromURL(postImageId);    await url.delete();    return true;  } catch (e) {    logger(e.toString(), hint: 'FBDELETEIMG CATCH ERROR');    return false;  }}Future<String?> fbUploadBannerImgAndGetLink({  required File imageFile,  required String postImageId,}) async {  try {    final reference = FirebaseStorage.instance        .ref("$fbJobImagesBannerStorageFolderName/$postImageId");    final uploadTask = reference.putFile(imageFile);    final snapshot = await uploadTask.whenComplete(() {});    if (snapshot.state == TaskState.success) {      final downloadURL = await snapshot.ref.getDownloadURL();      return downloadURL;    } else {      logger('Image upload failed', hint: 'fbUploadImgAndGetLink');      return null;    }  } catch (e) {    logger(e.toString(), hint: 'FBUPLOADIMGANDGETLINK CATCH ERROR');    return null;  }}Future<bool> fbDeleteBannerImg({required String postImageId}) async {  try {    final url = FirebaseStorage.instance.refFromURL(postImageId);    await url.delete();    return true;  } catch (e) {    logger(e.toString(), hint: 'FBDELETEIMG CATCH ERROR');    return false;  }}Future<File?> compressImageFunc(File file) async {  File compressedFile = File(file.path);  int fileSize = compressedFile.lengthSync();  if (fileSize <= 3 * 1024 * 1024) {    return file;  }  double quality = 0.8;  int attempts = 0;  while (fileSize > 3 * 1024 * 1024 && attempts < 5) {    attempts++;    XFile? compressedImage = await FlutterImageCompress.compressAndGetFile(      compressedFile.path,      compressedFile.path,      quality: (quality * 100).round(),      minHeight: 1920,      minWidth: 1080,    );    if (compressedImage != null) {      compressedFile = File(compressedImage.path);      fileSize =          compressedFile.lengthSync(); // Update the fileSize after compression      quality -= 0.1;    } else {      break;    }  }  if (fileSize > 3 * 1024 * 1024) {    return null;  } else {    return compressedFile;  }} //Do not compress image while uploadingString calculateDuration(Timestamp timestamp) {  final postDate = timestamp.toDate();  final now = DateTime.now();  final difference = now.difference(postDate).inDays;  if (difference > 30) {    return DateFormat('yyyy-MM-dd').format(postDate);  }  if (difference == 0) {    return 'Today';  } else if (difference == 1) {    return 'Yesterday';  } else {    return '$difference days ago';  }}