import 'dart:convert';import 'dart:io';import 'package:auto_route/annotations.dart';import 'package:auto_route/auto_route.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter_multi_formatter/formatters/masked_input_formatter.dart';import 'package:flutter_quill/flutter_quill.dart';import 'package:intl/intl.dart';import '../../../../manager/models/Ads/banner_ads/banner_md.dart';import 'package:mehonot_admin/presentation/utils/constants.dart';import '../../../../manager/navigation/router.gr.dart';import '../../../../manager/redux/states/ads_state.dart';import '../../../template/template.dart';import '../../../utils/common/validators.dart';import '../../../widgets/photo_widgets/image_upload.dart';@RoutePage()class BannerEditPage extends StatefulWidget {  BannerModel bannerMd;  Function onBannerEdit;  BannerEditPage({    Key? key,    required this.bannerMd,    required this.onBannerEdit,  }) : super(key: key);  @override  State<BannerEditPage> createState() => _BannerEditPageState();}class _BannerEditPageState extends State<BannerEditPage> {  final GlobalKey<FormState> editBannerFormKey = GlobalKey<FormState>();  TextEditingController bannerTitleCntr = TextEditingController();  TextEditingController bannerDescCntr = TextEditingController();  TextEditingController companyCntr = TextEditingController();  TextEditingController emailCntr = TextEditingController();  TextEditingController phoneCntr = TextEditingController();  TextEditingController startDateCntr = TextEditingController();  TextEditingController endDateCntr = TextEditingController();  Timestamp editBannerStartDate = Timestamp.now();  Timestamp editBannerEndDate = Timestamp.now();  late String _bannerType;  late String _bannerDivision;  bool jobIsCreate = false;  late BannerModel bannerModel;  List<String> networkImages = [];  List<String> imageUrlsToDelete = [];  List<File>? imageFilesToAdd;  QuillController quillText = QuillController.basic();  String quilStringToUpload = "";  @override  void dispose() {    bannerTitleCntr.dispose();    bannerDescCntr.dispose();    companyCntr.dispose();    emailCntr.dispose();    phoneCntr.dispose();    super.dispose();  }  @override  void initState() {    super.initState();    bannerModel = widget.bannerMd;    bannerTitleCntr.text = bannerModel.title;    bannerDescCntr.text = bannerModel.description ?? "";    companyCntr.text = bannerModel.companyName;    emailCntr.text = bannerModel.email ?? "";    phoneCntr.text = bannerModel.phone ?? "";    _bannerType = bannerModel.bannerType;    if (bannerModel.image.isNotEmpty) {      networkImages.add(bannerModel.image);    }    _bannerDivision = Constants.jobDivisionList.first.name;    convertJsonToQuillController(widget.bannerMd.description ?? '');    quillControllerToJsonString(quillText);  }  @override  Widget build(BuildContext context) {    return Form(        key: editBannerFormKey,        child: Padding(          padding: EdgeInsets.all(40.w),          child: SingleChildScrollView(              child: SpacedColumn(verticalSpace: 40, children: [            _buildTitleSec(),            _buildImageSec(),            _buildCompanyNameSec(),            _buildEmailSec(),            _buildPhoneSec(),            _buildDurationSec(),            _buildQuillDescSec(context),            _buildBannerDivisionSec(),            _buildBannerTypeSec(),            _buildButtonSec(context)          ])),        ));  }  Widget _buildTitleSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: S(context).title, textStyle: ThemeTextSemiBold.k14)),      PrsmInputField(        controller: bannerTitleCntr,        maxLines: 5,        enableShadow: false,        validator: Validator(context).validateField,        defaultBorderColor: ThemeColors.coolgray300,      ),    ]);  }  Widget _buildImageSec() {    return SpacedColumn(children: [      divider(),      PrsmImageUpload(          imageNetUrls: networkImages,          maxImageCount: 1,          onRemoveNetworkImg: (index) {            if (networkImages.isNotEmpty) {              setState(() {                imageUrlsToDelete.add(networkImages[index]);                networkImages.removeAt(index);              });            }          },          onImageSelected: (imageFile, image) {            logger("Image Selected");            logger(imageFile);            logger(image);            setState(() {              imageFilesToAdd = imageFile;            });          }),      divider(),    ]);  }  Widget _buildCompanyNameSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: "Company Name", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmInputField(            controller: companyCntr,            validator: Validator(context).validateField,          ))    ]);  }  Widget _buildEmailSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(text: "Email", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmInputField(            controller: emailCntr,            validator: Validator(context).validateField,          ))    ]);  }  Widget _buildPhoneSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: "Phone number", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmInputField(            controller: phoneCntr,            keyboardType: TextInputType.number,            formatter: [              MaskedInputFormatter('00000000000',                  allowedCharMatcher: RegExp(r'[0-9]'))            ],            validator: Validator(context).validatePhone,          ))    ]);  }  Widget _buildDurationSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(text: "Duration", textStyle: ThemeTextSemiBold.k14)),      SpacedRow(          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SizedBox(              width: (MediaQuery.of(context).size.width / 2) - 80.w,              child: PrsmInputField(                enabled: false,                controller: startDateCntr,                hintText: "Start date",                onTap: () => showDateCalendarPopup(context, true),              ),            ),            SizedBox(              width: (MediaQuery.of(context).size.width / 2) - 80.w,              child: PrsmInputField(                enabled: false,                controller: endDateCntr,                hintText: "End date",                onTap: () => showDateCalendarPopup(context, false),              ),            )          ])    ]);  }  Widget _buildBannerDivisionSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: "Banner division", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmDropdown(              listValues: Constants.jobDivisionList.map((e) => e.name).toList(),              value: _bannerDivision,              onChanged: (val) {                setState(() {                  _bannerDivision = val;                });              }))    ]);  }  Widget _buildBannerTypeSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: "Banner choice", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmDropdown(              listValues: const ["home", "setting"],              value: _bannerType,              onChanged: (val) {                setState(() {                  _bannerType = val;                });              }))    ]);  }  Widget _buildButtonSec(BuildContext context) {    return SpacedColumn(children: [      divider(),      PrimaryButton(          buttonText: S(context).update,          buttonSize: ButtonSize.L,          onPressed: () async {            if (editBannerFormKey.currentState!.validate()) {              showConfirmJobPostPopup(context, false);            } else {              logger("Validation Error");            }          }),    ]);  }  Widget divider() {    return const Divider(      color: ThemeColors.coolgray300,    );  }  void showConfirmJobPostPopup(BuildContext context, bool? updateJob) {    showDialog(        context: context,        barrierDismissible: false,        builder: (BuildContext context) {          return AlertDialog(            title: const SizedText(text: "Confirm Banner update"),            content: const SizedText(                text: "Are you sure you want to Update this banner?"),            actions: [              TextButton(                  onPressed: () {                    Navigator.pop(context);                  },                  child: SizedText(text: S(context).cancel)),              TextButton(                  onPressed: () {                    Navigator.pop(context);                    updateBannerApi(context);                  },                  child: SizedText(text: S(context).confirm)),            ],          );        });  }  showDateCalendarPopup(BuildContext context, bool startDate) async {    final DateTime? picked = await showDatePicker(        context: context,        initialDate: DateTime.now(),        firstDate: DateTime.now(),        lastDate: DateTime(2101));    if (picked != null) {      setState(() {        if (startDate) {          editBannerStartDate = Timestamp.fromDate(picked);          startDateCntr.text = DateFormat('yyyy-MM-dd').format(picked);        } else {          editBannerEndDate = Timestamp.fromDate(picked);          endDateCntr.text = DateFormat('yyyy-MM-dd').format(picked);        }      });    }  }  updateBannerApi(BuildContext parentContext) async {    logger(quilStringToUpload, hint: "----------updateBannerApi----------");    bool success = await appStore.dispatch(GetUpdatedBannersAction(        context: context,        division: convertStringToDivision(_bannerDivision),        imageFilesToAdd: imageFilesToAdd,        imageUrlsToAdd: networkImages.isNotEmpty ? networkImages.first : "",        // imageUrlsToDelete:        //     imageUrlsToDelete.isNotEmpty ? networkImages.first : "",        bannerType: _bannerType,        bannerModel: BannerModel(          title: bannerTitleCntr.text,          description: quilStringToUpload,          companyName: companyCntr.text,          email: emailCntr.text,          bannerType: _bannerType,          id: widget.bannerMd.id,          postedById: appStore.state.userState.userData.userId,          phone: phoneCntr.text,          image: '',          createdAt: Timestamp.now(),          startAt: editBannerStartDate,          removeAt: editBannerEndDate,        )));    if (success) {      logger("DFSFSFDFF");      if (context.mounted) {        showDialog(            barrierDismissible: false,            context: context,            builder: (BuildContext context) {              return AlertDialog(                title: const SizedText(text: "Success"),                content: const SizedText(text: "Banner created successfully"),                actions: [                  TextButton(                      onPressed: () async {                        Navigator.pop(context);                        if (widget.bannerMd.bannerType == "home") {                          widget.onBannerEdit();                          context.navigateTo(const BannerHomeListRoute());                        } else {                          widget.onBannerEdit();                          context.navigateTo(const BannerSetListRoute());                        }                      },                      child: const SizedText(text: "Ok"))                ],              );            });      }    }  }  Widget _buildQuillDescSec(BuildContext context) {    return SpacedColumn(children: [      Padding(          padding: EdgeInsets.symmetric(vertical: 20.h),          child: SpacedRow(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              SizedText(                  text: S(context).description,                  textStyle: ThemeTextSemiBold.k14),              if (!(quillText.document.isEmpty()))                Material(                  child: InkWell(                    onTap: () {                      quillTextEditor(context);                    },                    child: const HeroIcon(                      HeroIcons.pencilSquare,                      color: ThemeColors.green800,                    ),                  ),                )            ],          )),      if (quillText.document.isEmpty())        PrimaryButton(            buttonText: "Banner description",            bgColor: ThemeColors.emerald500,            btnTextStyle: ThemeTextSemiBold.k18.copyWith(color: Colors.white),            onPressed: () {              quillTextEditor(context);            })      else        Container(            decoration: BoxDecoration(              border: Border.all(color: ThemeColors.coolgray300, width: 1.w),              borderRadius: BorderRadius.circular(18.w),              color: ThemeColors.coolgray200,            ),            padding: EdgeInsets.all(40.w),            width: MediaQuery.of(context).size.width - 100.w,            height: 400.h,            child: QuillEditor(              controller: quillText,              readOnly: true,              focusNode: FocusNode(),              scrollController: ScrollController(),              scrollable: true,              padding: EdgeInsets.zero,              autoFocus: false,              expands: true,              showCursor: false,            ))    ]);  }  void quillTextEditor(BuildContext context) {    context.pushRoute(QuillEditorRoute(        controller: quillText,        onDone: (quilTextCntr) {          logger(quilTextCntr, hint: "Quill Text Cntr");          logger(quillControllerToJsonString(quilTextCntr),              hint: "Quill Text Cntr1");          setState(() {            quillText = quilTextCntr;          });          quillControllerToJsonString(quilTextCntr);          context.popRoute();          logger(quilStringToUpload, hint: "Quill__String__Updated");        }));  }  quillControllerToJsonString(QuillController quillController) {    Document document = quillController.document;    Delta delta = document.toDelta();    List<dynamic> jsonList = delta.toList();    String jsonString = json.encode(jsonList);    setState(() {      quilStringToUpload = jsonString;    });  }  void convertJsonToQuillController(String jsonText) {    if (jsonText == "") {      return;    }    String jsonString = jsonText;    List<dynamic> jsonList = json.decode(jsonString);    Delta delta = Delta.fromJson(jsonList);    Document document = Document.fromJson(delta.toJson());    setState(() {      quillText = QuillController(        document: document,        selection: const TextSelection.collapsed(offset: 0),      );    });  }}