import 'package:auto_route/auto_route.dart';import 'package:mehonot_admin/manager/navigation/router.gr.dart';import '../../../../manager/models/Job/job_md.dart';import '../../../../manager/redux/states/ads_state.dart';import '../../../../manager/redux/states/jobs_state.dart';import '../../../template/template.dart';import '../../../utils/constants.dart';@RoutePage(name: "JobAdCreateRoute")class JobAdCreatePage extends StatefulWidget {  const JobAdCreatePage({Key? key}) : super(key: key);  @override  State<JobAdCreatePage> createState() => _JobAdCreatePageState();}class _JobAdCreatePageState extends State<JobAdCreatePage> {  Division selectedDivision = Division.Dhaka;  List<JobModel> jobList = [];  final TextEditingController _searchController = TextEditingController();  bool isLoading = false;  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        builder: (_, state) {          return Container(              height: MediaQuery                  .of(context)                  .size                  .height - 300,              child: Padding(                  padding: EdgeInsets.all(20.w),                  child: SingleChildScrollView(                      child: SpacedColumn(                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [_buildTopSec(state), _buildJobList()]))));        });  }  _buildTopSec(AppState state) {    return SpacedRow(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      crossAxisAlignment: CrossAxisAlignment.center,      children: [        PrsmDropdown(            listValues: Constants.jobDivisionList.map((e) => e.name).toList(),            value: selectedDivision.name,            onChanged: (value) {              setState(() {                selectedDivision = Constants.jobDivisionList                    .firstWhere((element) => element.name == value);              });            }),        PrsmInputField(          controller: _searchController,          onSubmit: (value) {            _searchJob();          },        )      ],    );  }  _buildJobList() {    return isLoading        ? const Center(child: CircularProgressIndicator())        : jobList.isEmpty        ? const Center(child: Text("No Job Found"))        : ListView.builder(        shrinkWrap: true,        physics: const NeverScrollableScrollPhysics(),        itemCount: jobList.length,        itemBuilder: (context, index) {          return PrsmJobContainer(            jobModel: jobList.elementAt(index),            onReqAccept: () async {              await appStore.dispatch(GetCreateJobAdsAction(                  division: convertStringToDivision(                      jobList                          .elementAt(index)                          .address                          .division),                  jobId: jobList                      .elementAt(index)                      .jobId));            },            onTap: () {              context.pushRoute(                  JobDetailsRouter(jobModel: jobList.elementAt(index)));            },          );        });  }  Future _searchJob() async {    setState(() {      isLoading = true;    });    bool success = await appStore.dispatch(GetJobSearchAction(      searchText: _searchController.text,    ));    if (success) {      setState(() {        isLoading = false;        jobList = appStore.state.jobsState.searchJobList;      });    }  }}