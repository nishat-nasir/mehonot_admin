import 'package:auto_route/auto_route.dart';import 'package:mehonot_admin/manager/models/Job/job_md.dart';import 'package:mehonot_admin/manager/navigation/router.gr.dart';import 'package:mehonot_admin/manager/redux/states/ads_state.dart';import 'package:mehonot_admin/manager/redux/states/jobs_state.dart';import '../../../template/template.dart';import '../../../utils/constants.dart';@RoutePage(name: "JobAdCreateRoute")class JobAdCreatePage extends StatefulWidget {  const JobAdCreatePage({Key? key}) : super(key: key);  @override  State<JobAdCreatePage> createState() => _JobAdCreatePageState();}class _JobAdCreatePageState extends State<JobAdCreatePage> {  Division selectedDivision = Division.Dhaka;  List<JobModel> jobList = [];  final TextEditingController _searchController = TextEditingController();  bool isLoading = false;  bool isLoadingMore = false;  List<JobModel> currentLocJobList = [];  String screenText = "";  bool showSeeMoreBtn = false;  @override  void initState() {    super.initState();  }  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(      converter: (store) => store.state,      builder: (_, state) {        return SizedBox(          height: MediaQuery.of(context).size.height - 300,          child: Padding(            padding: EdgeInsets.all(20.w),            child: SingleChildScrollView(              child: SpacedColumn(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  _buildTopSec(state),                  _buildJobList(),                  if (showSeeMoreBtn) _buildSeeMoreButton(),                ],              ),            ),          ),        );      },    );  }  Widget _buildTopSec(AppState state) {    return SpacedRow(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      crossAxisAlignment: CrossAxisAlignment.center,      children: [        SizedBox(          width: 400.w,          child: PrsmDropdown(            listValues: Constants.jobDivisionList.map((e) => e.name).toList(),            value: selectedDivision.name,            onChanged: (value) {              setState(() {                selectedDivision = Constants.jobDivisionList                    .firstWhere((element) => element.name == value);              });            },          ),        ),        SizedBox(          width: 600.w,          height: 120.h,          child: PrsmInputField(            leftIcon: HeroIcons.magnifyingGlass,            controller: _searchController,            onSubmit: (value) {              _searchJob();            },          ),        ),      ],    );  }  Widget _buildJobList() {    return isLoading        ? const Center(child: CircularProgressIndicator())        : jobList.isEmpty            ? SizedBox(                height: 800.h,                child: Center(                    child: SizedText(                  width: 500.w,                  height: 200.h,                  textAlign: TextAlign.center,                  softWrap: true,                  text: screenText,                  textStyle: ThemeTextRegular.k14,                )))            : ListView.builder(                shrinkWrap: true,                physics: const NeverScrollableScrollPhysics(),                itemCount: jobList.length,                itemBuilder: (context, index) {                  return PrsmJobContainer(                    jobModel: jobList.elementAt(index),                    onReqAccept: () async {                      await appStore.dispatch(GetCreateJobAdsAction(                          division: convertStringToDivision(                              jobList.elementAt(index).address.division),                          jobId: jobList.elementAt(index).jobId));                    },                    onTap: () {                      context.pushRoute(                          JobDetailsRouter(jobModel: jobList.elementAt(index)));                    },                  );                },              );  }  Widget _buildSeeMoreButton() {    return isLoadingMore        ? const Center(child: CircularProgressIndicator())        : jobList.length < currentLocJobList.length            ? Center(                child: PrimaryButton(                  buttonText: "See More",                  buttonType: ButtonType.Link,                  buttonSize: ButtonSize.L,                  onPressed: () {                    fetchMoreData();                  },                ),              )            : const SizedBox();  }  Future<void> _searchJob() async {    setState(() {      isLoading = true;    });    bool success;    if (_searchController.text.isEmpty) {      setState(() {        isLoading = false;        jobList = [];      });      success = await fetchJobsForDivision();      if (jobList.isEmpty) {        setState(() {          screenText = "No Jobs Found";        });      } else {        setState(() {          screenText = "";          showSeeMoreBtn = true;        });      }    } else {      success = await appStore.dispatch(GetJobSearchAction(        searchText: _searchController.text,      ));      if (jobList.isEmpty) {        setState(() {          screenText =              "Couldn't found job with \"${_searchController.text}\" title";        });      }    }    if (success) {      setState(() {        isLoading = false;        jobList = appStore.state.jobsState.searchJobList;      });    }  }  Future<bool> fetchJobsForDivision() async {    bool success =        await appStore.dispatch(GetJobsAction(division: selectedDivision));    if (success) {      // first empty all jobs      currentLocJobList.clear();      // alreadyFetched = true;      List<JobModel> jobs = appStore.state.jobsState.currentLocationJobsList;      for (int i = 0; i < jobs.length; i++) {        setState(() {          currentLocJobList.add(jobs[i]);        });      }    }    return success;  }  Future<void> fetchMoreData() async {    setState(() {      isLoadingMore = true;    });    await Future.delayed(const Duration(seconds: 3), () async {      bool success = await appStore.dispatch(GetJobsAction(          division: selectedDivision,          lastDocumentId:              appStore.state.jobsState.currentLocationJobsList.last.jobId));      if (success) {        List<JobModel> jobs = appStore.state.jobsState.currentLocationJobsList;        for (int i = 0; i < jobs.length; i++) {          setState(() {            currentLocJobList.add(jobs[i]);          });        }      } else {        if (context.mounted) {          ScaffoldMessenger.of(context).showSnackBar(SnackBar(            backgroundColor: ThemeColors.indigo300,            duration: const Duration(seconds: 1),            content: SizedText(              text: "No more jobs found",              textStyle: ThemeTextRegular.k12.copyWith(                color: ThemeColors.indigo900,                fontWeight: FontWeight.w400,              ),            ),          ));        }      }    });    setState(() {      isLoadingMore = false;    });  }}