import 'package:auto_route/annotations.dart';import '../../template/template.dart';import '../../utils/common/validators.dart';import '../../widgets/image_upload.dart';@RoutePage()class BannerCreatePage extends StatefulWidget {  const BannerCreatePage({Key? key}) : super(key: key);  @override  State<BannerCreatePage> createState() => _BannerCreatePageState();}class _BannerCreatePageState extends State<BannerCreatePage> {  final GlobalKey<FormState> createBannerFormKey = GlobalKey<FormState>();  TextEditingController bannerTitleCntr = TextEditingController();  TextEditingController bannerDescCntr = TextEditingController();  @override  void dispose() {    bannerTitleCntr.dispose();    bannerDescCntr.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return Form(        key: createBannerFormKey,        child: Padding(            padding: EdgeInsets.all(40.w),            child: SingleChildScrollView(                child: SpacedColumn(verticalSpace: 22, children: [              _buildTitleSec(),              _buildImageSec(),              _buildDurationSec(),              _buildDescSec(),              _buildBannerTypeSec(),              _buildButtonSec(context),            ]))));  }  Widget _buildTitleSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: S(context).title, textStyle: ThemeTextSemiBold.k14)),      PrsmInputField(        controller: bannerTitleCntr,        maxLines: 5,        enableShadow: false,        validator: Validator(context).validateField,        defaultBorderColor: ThemeColors.coolgray300,      ),    ]);  }  Widget _buildImageSec() {    return SpacedColumn(children: [      divider(),      const PrsmImageUpload(),      divider(),    ]);  }  Widget _buildDurationSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(text: "Duration", textStyle: ThemeTextSemiBold.k14)),      SpacedRow(          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SizedBox(              width: (MediaQuery.of(context).size.width / 2) - 80.w,              child: PrsmInputField(),            ),            SizedBox(              width: (MediaQuery.of(context).size.width / 2) - 80.w,              child: PrsmInputField(),            )          ])    ]);  }  Widget _buildDescSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child:              SizedText(text: "Description", textStyle: ThemeTextSemiBold.k14)),      PrsmInputField(        controller: bannerDescCntr,        maxLines: 5,        enableShadow: false,        validator: Validator(context).validateField,        defaultBorderColor: ThemeColors.coolgray300,      ),    ]);  }  Widget _buildBannerTypeSec() {    return SpacedColumn(children: [      Align(          alignment: Alignment.centerLeft,          child: SizedText(              text: "Banner choice", textStyle: ThemeTextSemiBold.k14)),      SizedBox(          width: MediaQuery.of(context).size.width - 100.w,          child: PrsmDropdown(listValues: ["1", "2"], onChanged: (val) {}))    ]);  }  Widget _buildButtonSec(BuildContext context) {    return SpacedColumn(children: [      divider(),      PrimaryButton(          buttonText: S(context).post,          buttonSize: ButtonSize.L,          onPressed: () async {            if (createBannerFormKey.currentState!.validate()) {              showConfirmJobPostPopup(context, false);            } else {              logger("Validation Error");            }          }),    ]);  }  Widget divider() {    return const Divider(      color: ThemeColors.coolgray300,    );  }  void showConfirmJobPostPopup(BuildContext context, bool? updateJob) {    showDialog(        context: context,        builder: (BuildContext context) {          return AlertDialog(            title: Text("Confirm Banner post"),            content: Text("Are you sure you want to post this banner?"),            actions: [              TextButton(                  onPressed: () {                    Navigator.pop(context);                  },                  child: Text(S(context).cancel)),              TextButton(                  onPressed: () {                    Navigator.pop(context);                    createBanner();                  },                  child: Text(S(context).confirm)),            ],          );        });  }  createBanner() async {}}