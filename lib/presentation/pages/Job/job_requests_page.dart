import 'package:auto_route/annotations.dart';import 'package:auto_route/auto_route.dart';import 'package:mehonot_admin/manager/models/Address/address_md.dart';import 'package:mehonot_admin/manager/models/Job/job_dtl_md.dart';import 'package:mehonot_admin/manager/models/Job/job_md.dart';import '../../../manager/navigation/router.gr.dart';import '../../../manager/redux/states/jobs_state.dart';import '../../template/template.dart';@RoutePage()class JobRequestsPage extends StatefulWidget {  const JobRequestsPage({Key? key}) : super(key: key);  @override  State<JobRequestsPage> createState() => _JobRequestsPageState();}class _JobRequestsPageState extends State<JobRequestsPage> {  JobModel? currentJob;  JobDetailModel? currentJobDetail;  @override  void initState() {    super.initState();    WidgetsBinding.instance.addPostFrameCallback((_) {      _fetchAllJobRequests();    });  }  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        builder: (_, state) {          return Padding(              padding: EdgeInsets.all(20.w),              child: SingleChildScrollView(                  child: SpacedColumn(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [_buildJobRequestList(state)])));        });  }  Widget _buildJobRequestList(AppState state) {    List<Widget> list = [];    List<JobModel> allReqJobs = state.jobsState.allRequestedJobs;    list.add(Align(        alignment: Alignment.topLeft,        child: SizedText(            text: "Job req : ${state.jobsState.allRequestedJobs.length}",            textStyle: ThemeTextRegular.k12)));    for (int i = 0; i < allReqJobs.length; i++) {      list.add(PrsmJobContainer(        jobModel: JobModel(          jobId: allReqJobs[i].jobId,          jobDetailsId: allReqJobs[i].jobDetailsId,          postedByUserId: allReqJobs[i].postedByUserId,          address: AddressModel(            division: allReqJobs[i].address.division,            area: allReqJobs[i].address.area,            district: allReqJobs[i].address.district,            city: allReqJobs[i].address.city,          ),          title: allReqJobs[i].title,          companyName: allReqJobs[i].companyName,          type: allReqJobs[i].type,          workFinishTime: allReqJobs[i].workFinishTime,          workStartTime: allReqJobs[i].workStartTime,        ),        onReqAccept: () {          _onReqAccept(              jobMd: JobModel(            jobId: allReqJobs[i].jobId,            jobDetailsId: allReqJobs[i].jobDetailsId,            postedByUserId: allReqJobs[i].postedByUserId,            address: AddressModel(              division: allReqJobs[i].address.division,              area: allReqJobs[i].address.area,              district: allReqJobs[i].address.district,              city: allReqJobs[i].address.city,            ),            title: allReqJobs[i].title,            companyName: allReqJobs[i].companyName,            type: allReqJobs[i].type,            workFinishTime: allReqJobs[i].workFinishTime,            workStartTime: allReqJobs[i].workStartTime,          ));        },        onReqDecline: () {},        onTap: () {          context.pushRoute(JobDetailsRouter(            jobModel: JobModel(              jobId: allReqJobs[i].jobId,              jobDetailsId: allReqJobs[i].jobDetailsId,              postedByUserId: allReqJobs[i].postedByUserId,              address: AddressModel(                division: allReqJobs[i].address.division,                area: allReqJobs[i].address.area,                district: allReqJobs[i].address.district,                city: allReqJobs[i].address.city,              ),              title: allReqJobs[i].title,              companyName: allReqJobs[i].companyName,              type: allReqJobs[i].type,              workFinishTime: allReqJobs[i].workStartTime,              workStartTime: allReqJobs[i].workStartTime,            ),          ));        },      ));    }    return SpacedColumn(      crossAxisAlignment: CrossAxisAlignment.center,      verticalSpace: 20,      children: list,    );  }  Future _onReqAccept({required JobModel jobMd}) async {    bool suc = await appStore.dispatch(GetJobDetailsAction(        jobId: jobMd.jobId,        division: convertStringToDivision(jobMd.address.division),        jobDetailsId: jobMd.jobDetailsId));    if (suc) {      bool success = await appStore.dispatch(GetCreateJobAction(        jobModel: jobMd,        jobDetailModel: appStore.state.jobsState.selectedJobDetailModel,      ));      if (success) {        if (mounted) {          showDialog(              context: context,              builder: (context) => AlertDialog(                    title: const Text("Job Accepted"),                    content: const Text("Job Accepted Successfully"),                    actions: [                      TextButton(                          onPressed: () {                            Navigator.pop(context);                          },                          child: const Text("Ok"))                    ],                  ));        }      } else {        if (mounted) {          showDialog(              context: context,              builder: (context) => AlertDialog(                    title: const Text("Job Accepted"),                    content: const Text("Job Accepted Failed"),                    actions: [                      TextButton(                          onPressed: () {                            Navigator.pop(context);                          },                          child: const Text("Ok"))                    ],                  ));        }      }    }  }  Future _fetchAllJobRequests() async {    await appStore.dispatch(GetReqJobsAction());  }}