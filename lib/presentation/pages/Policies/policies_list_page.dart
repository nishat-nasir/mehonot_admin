import 'dart:convert';import 'package:auto_route/annotations.dart';import 'package:auto_route/auto_route.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter_quill/flutter_quill.dart';import 'package:mehonot_admin/manager/models/sync/sync_reg_terms_md.dart';import 'package:mehonot_admin/presentation/widgets/quill/quill_view_page.dart';import '../../../manager/navigation/router.gr.dart';import '../../../manager/redux/states/init_state.dart';import '../../template/template.dart';@RoutePage(name: "PoliciesListRoute")class PoliciesListPage extends StatefulWidget {  const PoliciesListPage({Key? key}) : super(key: key);  @override  State<PoliciesListPage> createState() => _PoliciesListPageState();}class _PoliciesListPageState extends State<PoliciesListPage> {  QuillController quillHalalCntr = QuillController.basic();  QuillController quillPrivacyCntr = QuillController.basic();  QuillController quillSoftwareCntr = QuillController.basic();  QuillController quillMarketingCntr = QuillController.basic();  QuillController quillServiceCntr = QuillController.basic();  String quillHalalString = "";  String quillPrivacyString = "";  String quillSoftwareString = "";  String quillMarketingString = "";  String quillServiceString = "";  SyncRegTermsMd currentPolicies = appStore.state.initState.syncRegTermsMd;  @override  void initState() {    super.initState();    logger("INIT IS WORKING IN POLICIES");    logger(currentPolicies.toJson(), hint: "INIT IS WORKING IN POLICIES");    getTermsAndPoliciesAction();  }  @override  Widget build(BuildContext context) {    return Padding(      padding: EdgeInsets.all(20.w),      child: SingleChildScrollView(        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.start,            verticalSpace: 20,            children: [              SizedText(text: "Policies list", textStyle: ThemeTextBold.k20),              const Divider(),              titleSec(                  title: "Halal terms",                  quilCntr: quillHalalCntr,                  onDone: (quilTextCntr) {                    setState(() {                      quillHalalCntr = quilTextCntr;                      quillHalalString =                          quillControllerToJsonString(quillHalalCntr);                    });                  }),              QuillViewPage(                height: 500.h,                jsonTextForQuill: "",                quillController: quillHalalCntr,              ),              titleSec(                  title: "Privacy terms",                  quilCntr: quillPrivacyCntr,                  onDone: (quilTextCntr) {                    setState(() {                      quillPrivacyCntr = quilTextCntr;                      quillPrivacyString =                          quillControllerToJsonString(quillPrivacyCntr);                    });                  }),              QuillViewPage(                height: 500.h,                jsonTextForQuill: "",                quillController: quillPrivacyCntr,              ),              titleSec(                  title: "Software terms",                  quilCntr: quillSoftwareCntr,                  onDone: (quilTextCntr) {                    setState(() {                      quillSoftwareCntr = quilTextCntr;                      quillSoftwareString =                          quillControllerToJsonString(quillSoftwareCntr);                    });                  }),              QuillViewPage(                height: 500.h,                jsonTextForQuill: "",                quillController: quillSoftwareCntr,              ),              titleSec(                  title: "Marketing terms",                  quilCntr: quillMarketingCntr,                  onDone: (quilTextCntr) {                    setState(() {                      quillMarketingCntr = quilTextCntr;                      quillMarketingString =                          quillControllerToJsonString(quillMarketingCntr);                    });                  }),              QuillViewPage(                height: 500.h,                jsonTextForQuill: "",                quillController: quillMarketingCntr,              ),              titleSec(                  title: "Service terms (No Need)",                  quilCntr: quillServiceCntr,                  onDone: (quilTextCntr) {                    setState(() {                      quillServiceCntr = quilTextCntr;                      quillServiceString =                          quillControllerToJsonString(quillServiceCntr);                    });                  }),              QuillViewPage(                height: 500.h,                jsonTextForQuill: "",                quillController: quillServiceCntr,              ),              SizedBox(height: 100.h),              PrimaryButton(                  buttonText: "Upload",                  onPressed: () {                    uploadAllPolicies(context);                  }),              SizedBox(height: 20.h),            ]),      ),    );  }  Widget titleSec(      {required String title,      required QuillController quilCntr,      required Function(QuillController) onDone}) {    return SpacedRow(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      children: [        SizedText(text: title, textStyle: ThemeTextRegular.k12),        InkWell(          onTap: () {            context.pushRoute(QuillEditorRoute(                controller: quilCntr,                onDone: (quilTextCntr) {                  onDone(quilTextCntr);                  context.navigateTo(const PoliciesListRoute());                }));          },          child: SizedText(              text: "Edit",              textStyle:                  ThemeTextBold.k12.copyWith(color: ThemeColors.blue600)),        )      ],    );  }  void getTermsAndPoliciesAction() async {    setState(() {      quillHalalCntr = jsonStringToQuillController(currentPolicies.halalTerms);      quillPrivacyCntr =          jsonStringToQuillController(currentPolicies.personalInfoTerms);      quillSoftwareCntr =          jsonStringToQuillController(currentPolicies.softwareTerms);      quillMarketingCntr =          jsonStringToQuillController(currentPolicies.marketingInfoTerms);      quillServiceCntr =          jsonStringToQuillController(currentPolicies.serviceTerms);      quillHalalString = currentPolicies.halalTerms;      quillPrivacyString = currentPolicies.personalInfoTerms;      quillSoftwareString = currentPolicies.softwareTerms;      quillMarketingString = currentPolicies.marketingInfoTerms;      quillServiceString = currentPolicies.serviceTerms;    });  }  uploadAllPolicies(BuildContext context) {    showDialog(        context: context,        builder: (context) => AlertDialog(              title: SizedText(                text: "Upload policies",                textStyle: ThemeTextBold.k16,              ),              content: SizedText(                text: "Are you sure you want to upload the policies?",                textStyle: ThemeTextRegular.k14,              ),              actions: [                TextButton(                    onPressed: () {                      Navigator.of(context).pop();                    },                    child: SizedText(                      text: "Cancel",                      textStyle: ThemeTextRegular.k14                          .copyWith(color: ThemeColors.blue600),                    )),                TextButton(                    onPressed: () async {                      await appStore.dispatch(GetUpdateTermsAndPoliciesAction(                          syncRegTermsMd: SyncRegTermsMd(                        id: currentPolicies.id,                        createdDate: Timestamp.now().toString(),                        softwareTerms: quillSoftwareString,                        serviceTerms: quillServiceString,                        personalInfoTerms: quillPrivacyString,                        halalTerms: quillHalalString,                        marketingInfoTerms: quillMarketingString,                        version: currentPolicies.version,                      )));                      if (context.mounted) {                        Navigator.of(context).pop();                        showDialog(                            context: context,                            builder: (context) => AlertDialog(                                  title: SizedText(                                    text: "Success",                                    textStyle: ThemeTextBold.k16,                                  ),                                  content: SizedText(                                    text: "Policies uploaded successfully",                                    textStyle: ThemeTextRegular.k14,                                  ),                                  actions: [                                    TextButton(                                        onPressed: () {                                          Navigator.of(context).pop();                                        },                                        child: SizedText(                                          text: "Ok",                                          textStyle: ThemeTextRegular.k14                                              .copyWith(                                                  color: ThemeColors.blue600),                                        ))                                  ],                                ));                      }                    },                    child: SizedText(                      text: "Upload",                      textStyle: ThemeTextRegular.k14                          .copyWith(color: ThemeColors.blue600),                    )),              ],            ));  }  String quillControllerToJsonString(QuillController quillController) {    Document document = quillController.document;    Delta delta = document.toDelta();    List<dynamic> jsonList = delta.toList();    String jsonString = json.encode(jsonList);    return jsonString;  }  QuillController jsonStringToQuillController(String jsonString) {    List<dynamic> jsonList = json.decode(jsonString);    Delta delta = Delta.fromJson(jsonList);    Document document = Document.fromDelta(delta);    QuillController quillController = QuillController(        document: document,        selection: const TextSelection.collapsed(offset: 0));    return quillController;  }}