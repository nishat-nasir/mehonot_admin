import 'package:mehonot_admin/manager/hive_client.dart';import 'package:mehonot_admin/manager/redux/states/jobs_state.dart';import 'package:mehonot_admin/manager/redux/states/user_state.dart';import '../../../presentation/template/template.dart';import '../../navigation/router.gr.dart';import '../states/auth_state.dart';import '../states/init_state.dart';class InitMiddleware extends MiddlewareClass<AppState> {  @override  call(Store<AppState> store, action, next) {    switch (action.runtimeType) {      case GetStateInitAction:        return _getStateInitAction(store.state, action, next);      default:        return next(action);    }  }}_getStateInitAction(    AppState state, GetStateInitAction action, NextDispatcher next) async {  logger("GetStateInitAction -- Called");  logger(      "GetStateInitAction -- HiveClient.getUserId() ${HiveClient.getUserId()}");  logger(      "GetStateInitAction -- HiveClient.getDivision() ${HiveClient.getDivision()}");  bool userFetched = false;  if (HiveClient.getUserId() == null ||      HiveClient.getDivision() == null ||      HiveClient.getDivision() == "" ||      HiveClient.getUserId() == "") {    await Future.delayed(const Duration(seconds: 3));    appRouter.replaceAll([const Login01Route()]);  }  if (HiveClient.getUserId() != null ||      HiveClient.getDivision() != null ||      HiveClient.getDivision() != "" ||      HiveClient.getUserId() != "") {    await Future.delayed(const Duration(seconds: 3));    userFetched = await appStore.dispatch(GetExistedUserAction(      userId: HiveClient.getUserId()!,    ));    if (userFetched) {      appRouter.replaceAll([ GeneralWrapperRouter()]);    } else {      appRouter.replaceAll([const Login01Route()]);    }  }}